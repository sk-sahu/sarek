// This config is specific to google-life-science

includeConfig 'base.config'

google {
    lifeSciences.bootDiskSize = 50.GB
    lifeSciences.preemptible = true
    zone = params.gls_zone
    network = params.gls_network
    subnetwork = params.gls_subnetwork
}

docker.enabled = true

executor {
    name = 'google-lifesciences'
}

params {
  single_cpu_mem = 1.GB
}

process {
	disk = 100.GB
	
	withName: 'sra' {
        	disk = "100.GB"
		cpus = {check_max(16, 'cpus')}
        	memory = {check_max(60.GB, 'memory')}
		errorStrategy = {task.attempt == process.maxRetries ? 'ignore' : task.exitStatus in [1,3,9,10,14,143,137,104,134,139] ? 'retry' : 'ignore' }
	}
    	
	withName: 'BaseRecalibrator' {
		disk = "30.GB"
		cpus = {check_max(1, 'cpus')}
        	memory = {check_max(4.GB, 'memory')}
	}
	
    	withName: 'MapReads' {disk = "100.GB"}
        withName: 'MergeMpileup' {disk = "80.GB"}
        withName: 'ControlFREEC' {disk = "250.GB"}
        withName: 'ControlFREECSingle' {disk = "200.GB"}
        withName: 'MarkDuplicates' {disk = "50.GB"}
        withName: 'MergeBamRecal' {disk = "40.GB"}
        withName: 'ConcatVCF' {disk = "10.GB"}
        withName: 'Mpileup' {disk = "20.GB"}
        withName: 'ApplyBQSR' {disk = "30.GB"}
        withName: 'Vcftools' {disk = "10.GB"}
        withName: 'FreeBayes' {disk = "10.GB"}
        withName: 'FreebayesSingle' {disk = "10.GB"}
        withName: 'BamQC' {disk = "50.GB"}
        withName: 'FastQCFQ' {disk = "50.GB"}
        withName: 'GatherBQSRReports' {disk = "10.GB"}
        withName: 'ControlFreecVizSingle' {disk = "10.GB"}
        withName: 'ControlFreecViz' {disk = "10.GB"}
        withName: 'get_software_versions' {disk = "10.GB"}
        withName: 'SamtoolsStats' {disk = "10.GB"}
        withName: 'Output_documentation' {disk = "10.GB"}
        withName: 'BcftoolsStats' {disk = "10.GB"}
        withName: 'CreateIntervalBeds' {disk = "10.GB"}
        withName: 'MultiQC' {disk = "50.GB"}
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
